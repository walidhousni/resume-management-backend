import glob
import os
import sys
import slate3k as slate
from stanfordcorenlp import StanfordCoreNLP
from pymongo import MongoClient
import codecs
import json


BigDataTools = ['AgoraPulse',
                'Keyhole',
                'Buffer',
                'Brandwatch',
                'BuzzSumo',
                'Edgar',
                'Analytics',
                'Hootsuite',
                'Klout',
                'Little Bird',
                'NetBase',
                'Oktopost',
                'Quintly',
                'Rival IQ',
                'Salesforce Marketing Cloud',
                'Simply Measured',
                'Socialbakers',
                'Social Mention',
                'Followerwonk',
                'Iconosquare',
                'SocialBro',
                'Tailwind',
                'TweetReach',
                'IBM',
                'HP ',
                'SAP',
                'Microsoft',
                'Oracle',
                'Teradata',
                'SAS',
                'Dell ',
                'HPCC',
                'Palantir',
                'Pivotal',
                'BigQuery',
                'Amazon',
                'AWS',
                'Cloudera',
                'Hortonworks',
                'FICO',
                'Cisco',
                'Splunk',
                'Intel',
                'Mu',
                'sigma',
                'Opera',
                'Informatica',
                'MarkLogic',
                'Vmware',
                'Syncsort',
                'Guavus',
                'Alteryx',
                '1010data',
                'Actian',
                'MapR',
                'Attivioâ€™s',
                'DataStax',
                'Gooddata',
                'machine',
                'learning',
                'Datameer',
                'Amdocs',
                'Cisco',
                'Platfora',
                'GE',
                'MapReduce',
                'GridGain',
                'HPCC',
                'Storm',
                'Hadoop',
                'Cassandra',
                'HBase',
                'Neo4j',
                'CouchDB',
                'OrientDB',
                'Terrastore',
                'FlockDB',
                'Hibari',
                'Riak',
                'Hypertable',
                'Blazegraph',
                'Hive',
                'InfoBright',
                'Infinispan',
                'Redis',
                'Jaspersoft',
                'Jedox',
                'KNIME',
                'BIRT',
                'RapidMiner',
                'Mahout',
                'Orange',
                'Weka',
                'DataMelt',
                'KEEL',
                'SPMF',
                'Rattle',
                'Gluster',
                'Hadoop',
                'HDFS',
                'Pig',
                'R',
                'ECL',
                'Lucene',
                'Solr',
                'Sqoop',
                'Flume',
                'Chukwa',
                'Terracotta',
                'Avro',
                'Oozie',
                'kafka',
                'Zookeeper',
                'Ambari',
                'Avro',
                'Cascading',
                'Chukwa',
                'HBase',
                'Hive',
                'Hivemall',
                'Mahout',
                'MapReduce',
                'Oozie',
                'Pig',
                'Sqoop',
                'Spark',
                'Tez',
                'YARN',
                'Zookeeper',
                'Disco',
                'HPCC',
                'Lumify',
                'Pandas',
                'Storm',
                'Blazegraph',
                'Cassandra',
                'CouchDB',
                'FlockDB',
                'Hibari',
                'Hypertable',
                'Impala',
                'Greenplum',
                'Neo4j',
                'OrientDB',
                'Pivotal',
                'Riak',
                'Redis',
                'GitHub',
                'SQLite',
                'Jaspersoft',
                'SpagoBI',
                'KNIME',
                'BIRT',
                'DataMelt',
                'jHepWork',
                'KEEL',
                'Orange',
                'RapidMiner',
                'Rattle',
                'SPMF',
                'Weka',
                'Drill',
                'ECL',
                'Lucene',
                'Solr',
                'Ignite',
                'Terracotta',
                'Pivotal GemFire',
                'Geode',
                'GridGain',
                'Infinispan']
BigDataTools = list(set(BigDataTools))
BigDataTools = [BigDataTools[i].lower() for i in range(len(BigDataTools))]

Program = ['APL',
           'AutoIt',
           'html',
           'jee',
           'css',
           'js',
           'javascript',
           'BASIC',
           'Eiffel',
           'Forth',
           'Frink',
           'ICI',
           'J',
           'Lisp',
           'Lua',
           'M',
           'Pascal',
           'PCASTL',
           'Perl',
           'PostScript',
           'Python',
           'REXX',
           'Ruby',
           'S-Lang',
           'Spin',
           'Charity',
           'Clean',
           'Curry',
           'Erlang',
           'F#',
           'Haskell',
           'Joy',
           'Kite',
           'ML',
           'Nemerle',
           'OPAL',
           'OPS5',
           'Q',
           'Ada',
           'ALGOL',
           'C',
           'C++',
           'C#',
           'CLEO',
           'COBOL',
           'Cobra',
           'D',
           'DASL',
           'DIBOL',
           'Fortran',
           'Java',
           'JOVIAL',
           'Objective-C',
           'Objective',
           'SMALL',
           'Smalltalk',
           'Turing',
           'Visual',
           'Basic',
           'vb',
           'vba',
           'Visual FoxPro',
           'XL',
           'Bliss',
           'ChucK',
           'CLIST',
           'HyperTalk',
           'Modula-2',
           'Oberon',
           'Component Pascal',
           'MATLAB',
           'plsql',
           'Occam',
           'PL',
           'PL/I',
           'Rapira',
           'RPG',
           'AppleScript',
           'Awk',
           'BeanShell',
           'ColdFusion',
           'F-Script',
           'JASS',
           'Maya',
           'Mondrian',
           'PHP',
           'Revolution',
           'Tcl',
           'VBScript',
           'Windows PowerShell',
           'Curl',
           'SGML',
           'HTML',
           'XML',
           'XHTML',
           'ALF',
           'Fril',
           'Janus',
           'Leda',
           'Oz',
           'Poplog',
           'Prolog',
           'ROOP',
           'ABCL',
           'Afnix',
           'Cilk',
           'Concurrent',
           'Pascal',
           'E',
           'Joule',
           'Limbo',
           'Pict',
           'SALSA',
           'SR',
           'Agora',
           'BETA',
           'Cecil',
           'Lava',
           'Lisaac',
           'MOO',
           'eclipse',
           'Moto',
           'Object-Z',
           'Obliq',
           'Oxygene',
           'Pliant',
           'Prograph',
           'REBOL',
           'Scala',
           'Self',
           'Slate',
           'XOTcl',
           'IO']
Program = [Program[i].lower() for i in range(len(Program))]


Front = ['Reactive',
         'MobX',
         'css',
         'css3',
         'html',
         'html5',
         'Omniscient',
         'Ractive.js',
         'Ractivejs',
         'Mercury',
         'WebRx',
         'Deku',
         'Riot.js',
         'Riotjs',
         'Riot',
         'Mithril',
         'Vue.js',
         'Vuejs',
         'MVC JavaScript Frameworks',
         'Angular.js',
         'Angularjs',
         'angular',
         'jQuery',
         'React',
         'hibernate',
         'bootstrap',
         'Socket',
         'Polymer',
         'Meteor',
         'D3.js',
         'D3js',
         'D3',
         'foundation',
         'bulma',
         'ulkit',
         'semantic',
         'semanticui',
         'susy',
         'materialize',
         'pure',
         'skeleton',
         'Ember',
         'milligram',
         'Aurelia',
         'Knockout',
         'Keystone',
         'Backbone',
         'Stapes']

Back = [
    'nodejs',
    'node',
    'node.js',
    'django',
    'flask',
    'express.js',
    'expressjs',
    'express',
    'phoenix',
    'ruby',
    'ruby on rails',
    'laravel',
    'phalcon',
    'spring',
    'codeigniter',
    'bottle',
    'beego',
    'actix',
    'yii',
    'pyramid',
    'actix',
    'symphony',
    'meteor',
    'firebase',
    'hapi',
    'n2o',
    'strapi',
    'seaside',
    'gotham',
    'revel',
    'padrino',
    'catalyst',
    'simplifyweb',
    'simplify',
    'simplify.web',
    'teapot',
    'iris',
    'zope'
]

Mobile = ['Swift',
          'PhoneGap',
          'Appcelerator',
          'RhoMobile',
          'WidgetPad',
          'MoSync',
          'Flutter',
          'react',
          'Native',
          'Ionic ',
          'Xamarin']
Mobile = [Mobile[i].lower() for i in range(len(Mobile))]

Design = ['Photoshop',
          'Illustrator',
          'Studio'
          'After',
          'Effects',
          'Lightroom',
          'InDesign',
          'Muse',
          'CC',
          'Flash',
          '3D',
          'Max',
          'Cinema',
          '4D',
          'Corel',
          'Draw',
          'FontLab',
          'Kelk',
          'QuarkXPress',
          'Axure',
          'RP',
          'Sketch',
          'Glyphs',
          'Zeplin',
          'Square',
          'Space',
          'Webflow',
          'Figma',
          'Wacom',
          'InVision',
          'GravitDesigner',
          'Flinto']
Design = [Design[i].lower() for i in range(len(Design))]


Scrum = ['Agilean',
         'Wrike',
         'Trello',
         'Apiumhub',
         'JIRA',
         'Axosoft',
         'Planbox',
         'Assembla',
         'Pivotal',
         'Asana',
         'Binfire',
         'Drag',
         'Drag Team',
         'here',
         'Proggio',
         'nTask',
         'OneDesk',
         'VivifyScrum',
         'StoriesOnBoard',
         'Nuvro']
Scrum = [Scrum[i].lower() for i in range(len(Scrum))]


DevOps = ['jenkins',
          'solarwinds',
          'vagrant',
          'pagerduty',
          'prometheus',
          'ganglia',
          'snort',
          'splunk',
          'nagios',
          'chef',
          'sumo'
          'logic',
          'rabbitmq',
          'logstash',
          'loggly',
          'devops',
          'activemq',
          'papertrail',
          'overops',
          'squid',
          'visual'
          'ide',
          'mcollective',
          'memcached',
          'docker',
          'cacti',
          'cfengine',
          'gradle',
          'maven',
          'jfrog',
          'artifactory',
          'capistrano',
          'redis',
          'tripwire',
          'monit',
          'collectl',
          'consul',
          'jira',
          'ant',
          'god',
          'productionmap',
          'juju',
          'scalyr',
          'saltstack',
          'ansible',
          'code-climate',
          'rudder',
          'puppet',
          'graylog',
          'upguard',
          'sensu']
DevOps = [DevOps[i].lower() for i in range(len(DevOps))]


BI = ['informatica',
      'infosphere',
      'infosphere',
      'integrator',
      'server',
      'ab initio',
      'talend',
      'sql',
      'cloveretl',
      'pentaho',
      'nifi',
      'jasper',
      'sas',
      'sap',
      'warehouse',
      'sybase',
      'etl',
      'dbsoftlab',
      'sisense',
      'birt',
      'iccube',
      'domo',
      'board',
      'clear',
      'ducen',
      'gooddata',
      'cognos',
      'insightsquared',
      'jaspersoft',
      'looker',
      'microstrategy',
      'mits',
      'openi',
      'oracle bi ',
      'oracle enterprise bi server',
      'oracle hyperion system',
      'palo',
      'olap',
      'pentaho',
      'power',
      'bi',
      'profit base',
      'qlikview',
      'rapid-insight',
      'rapid',
      'insight',
      'sap business intelligence',
      'sap businessobjects ',
      'sap netweaver bw',
      'sas bi',
      'silvon',
      'solver',
      'spagobi',
      'style intelligence',
      'syntell',
      'targit',
      'vismatica',
      'webfocus',
      'yellowfin']
BI = list(set(BI))
BI = [BI[i].lower() for i in range(len(BI))]


BD = ['Informix',
      'SQLite',
      'PostgreSQL',
      'RDS',
      'MongoDB',
      'Redis',
      'CouchDB',
      'mysql',
      'json',
      'Neo4j',
      'OrientDB',
      'Couchbase',
      'Toad',
      'phpMyAdmin',
      'SQL-Developer',
      'Sequel',
      'Robomongo',
      'DbVisualizer',
      'Cloudera',
      'MariaDB',
      'Informix',
      '4D']
BD = [BD[i].lower() for i in range(len(BD))]


Profile = ['data',
           'sharepoint',
           'mobile',
           'ios',
           'android',
           'dÃ©veloppement',
           'developpement',
           'ux',
           'ui',
           'designer',
           'intÃ©grateur',
           'front',
           'frontend',
           'back end',
           'back',
           'fullstack',
           'full-stack',
           'scrum master',
           'lead tech',
           'owner',
           'manager',
           'architect',
           'bi',
           'etl',
           'expert',
           'devops',
           'hybride',
           'testeur',
           'recette',
           'recetteur']

Metiers = ['cash',
           'payment',
           'bfi',
           'cib',
           'risk',
           'assurance',
           'banque',
           'dÃ©tails',
           'finance',
           'marchÃ©']

langue = ['anglais',
          'abkhaz',
          'adyghÃ©',
          'afrikaans',
          'akan',
          'albanais',
          'amharique',
          'arabe',
          'aragonais',
          'aramÃ©en',
          'armÃ©nien',
          'assamais',
          'aymara',
          'balinais',
          'basque',
          'betawi',
          'bosniaque',
          'breton',
          'bulgare',
          'cantonais',
          'catalan',
          'cherokee',
          'chickasaw',
          'chinois',
          'copte',
          'cornouaillais',
          'corse',
          'tatar de crimÃ©e',
          'croate',
          'tchÃ¨que',
          'danois',
          'nÃ©erlandais',
          'dawro',
          'espÃ©ranto',
          'estonien',
          'ewe',
          'fidji hindi',
          'philippin',
          'finlandais',
          'franÃ§ais',
          'galicien',
          'gÃ©orgien',
          'allemand',
          'grec moderne',
          'le grec ancien',
          'groenlandais',
          'crÃ©ole haÃ¯tien',
          'hawaÃ¯en',
          'hÃ©breu',
          'hindi',
          'hongrois',
          'islandais',
          'indonÃ©sien',
          'inuktitut',
          'interlingua',
          'irlandais',
          'italien',
          'japonais',
          'javanais',
          'kabardian',
          'kalasha',
          'kannada',
          'kachoube',
          'khmer',
          'kinyarwanda',
          'corÃ©en',
          'kurdish / kurdÃ®',
          'ladin',
          'latgalian',
          'latin',
          'lingala',
          'livonien',
          'lojban',
          'bas sorabe',
          'bas allemand',
          'macÃ©donien',
          'malais',
          'malayalam',
          'mandarin',
          'manx',
          'maori',
          'crÃ©ole mauricien',
          'anglais moyen',
          'allemand moyen bas',
          'min nan',
          'mongol',
          'norvÃ©gien',
          'ancien armÃ©nien',
          'vieux anglais',
          'vieux franÃ§ais',
          'vieux javanais',
          'vieux norrois',
          'vieux prussien',
          'oriya',
          'pangasinan',
          'papiamento',
          'pashto',
          'persan',
          'pitjantjatjara',
          'polonais',
          'portugais',
          'proto-slave',
          'quenya',
          'rajasthani',
          'rapa nui',
          'roumain',
          'russe',
          'sanskrit',
          'Ã©cossais',
          'gaÃ©lique Ã©cossais',
          'serbe',
          'serbo-croate',
          'slovaque',
          'slovÃ¨ne',
          'espanol',
          'sinhalese',
          'swahili',
          'suÃ©dois',
          'tagalog',
          'tadjik',
          'tamil',
          'tarantino',
          'telugu',
          'thaÃ¯landais',
          'tok pisin',
          'turc',
          'twi',
          'ukrainien',
          'haut sorabe',
          'urdu',
          'oughour',
          'ouzbek',
          'vÃ©nitien',
          'vietnamien',
          'vilamovian',
          'volapÃ¼k',
          'vÃµro',
          'gallois',
          'xhosa',
          'yiddish',
          'zazaki',
          'english',
          'abkhaz',
          'adyghe',
          'afrikaans',
          'akan',
          'albanian',
          'american sign language',
          'amharic',
          'arabic',
          'aragonese',
          'aramaic',
          'armenian',
          'assamese',
          'aymara',
          'balinese',
          'basque',
          'betawi',
          'bosnian',
          'breton',
          'bulgarian',
          'cantonese',
          'catalan',
          'cherokee',
          'chickasaw',
          'chinese',
          'coptic',
          'cornish',
          'corsican',
          'crimean tatar',
          'croatian',
          'czech',
          'danish',
          'dutch',
          'dawro',
          'esperanto',
          'estonian',
          'ewe',
          'fiji hindi',
          'filipino',
          'finnish',
          'french',
          'galician',
          'georgian',
          'german',
          'greek, modern',
          'ancient greek',
          'greenlandic',
          'haitian creole',
          'hawaiian',
          'hebrew',
          'hindi',
          'hungarian',
          'icelandic',
          'indonesian',
          'inuktitut',
          'interlingua',
          'irish',
          'italian',
          'japanese',
          'javanese',
          'kabardian',
          'kalasha',
          'kannada',
          'kashubian',
          'khmer',
          'kinyarwanda',
          'korean',
          'kurdish/kurdÃ®',
          'ladin',
          'latgalian',
          'latin',
          'lingala',
          'livonian',
          'lojban',
          'lower sorbian',
          'low german',
          'macedonian',
          'malay',
          'malayalam',
          'mandarin',
          'manx',
          'maori',
          'mauritian creole',
          'middle english',
          'middle low german',
          'min nan',
          'mongolian',
          'norwegian',
          'old armenian',
          'old english',
          'old french',
          'old javanese',
          'old norse',
          'old prussian',
          'oriya',
          'pangasinan',
          'papiamentu',
          'pashto',
          'persian',
          'pitjantjatjara',
          'polish',
          'portuguese',
          'proto-slavic',
          'quenya',
          'rajasthani',
          'rapa nui',
          'romanian',
          'russian',
          'sanskrit',
          'scots',
          'scottish gaelic',
          'serbian',
          'serbo-croatian',
          'slovak',
          'slovene',
          'spanish',
          'sinhalese',
          'swahili',
          'swedish',
          'tagalog',
          'tajik',
          'tamil',
          'tarantino',
          'telugu',
          'thai',
          'tok pisin',
          'turkish',
          'twi',
          'ukrainian',
          'upper sorbian',
          'urdu',
          'uyghur',
          'uzbek',
          'venetian',
          'vietnamese',
          'vilamovian',
          'volapÃ¼k',
          'vÃµro',
          'welsh',
          'xhosa',
          'yiddish',
          'zazaki']


class StanfordNLP:
    def __init__(self, host='http://localhost', port=9000):
        self.nlp = StanfordCoreNLP(host, port=port,
                                   timeout=30000)  # , quiet=False, logging_level=logging.DEBUG)
        self.props = {
            'annotators': 'tokenize,ssplit,pos,lemma,ner,parse,depparse,dcoref,relation',
            'pipelineLanguage': 'en',
            'outputFormat': 'json'
        }

    def word_tokenize(self, sentence):
        return self.nlp.word_tokenize(sentence)

    def pos(self, sentence):
        return self.nlp.pos_tag(sentence)

    def ner(self, sentence):
        return self.nlp.ner(sentence)

    def parse(self, sentence):
        return self.nlp.parse(sentence)

    def dependency_parse(self, sentence):
        return self.nlp.dependency_parse(sentence)


def intersection(lst1, lst2):
    lst3 = [value for value in lst1 if value in lst2]
    return lst3


for filepath in glob.iglob('./public/uploads/*.pdf'):

    with open(filepath, 'rb') as f:
        text = slate.PDF(f)
        name = os.path.basename(f.name)
        pdfid = name.split(".")[0]

    Name = ' '
    if len(text) > 0:
        t = ' '.join(text)
        Name = t.split('\n')[0].replace('\t', ' ')
        text = t.lower()

    if __name__ == '__main__':
        sNLP = StanfordNLP()
        L = sNLP.word_tokenize(text)
        List = sNLP.ner(text)

    txt = ' '.join(L)
    Email = ''
    Mail = []
    for i in range(len(List)):
        if List[i][1] == 'EMAIL' and len(Mail) < 1:
            Mail.append(List[i][0])
            Email = Mail[0]
    Phone = ''
    Number = []
    for i in range(len(List)):
        if List[i][1] == 'NUMBER' and len(List[i][0]) > 9:
            Number.append(List[i][0])
            Phone = Number[0]

    ScoringProg = intersection(L, Program)
    ScoringBigData = intersection(L, BigDataTools)
    ScoringFrame = intersection(L, Front)
    ScoringBackEnd = intersection(L, Back)
    ScoringMobileDev = intersection(L, Mobile)
    ScoringDevOpsTools = intersection(L, DevOps)
    ScoringDesignTools = intersection(L, Design)
    ScoringScrumTools = intersection(L, Scrum)
    ScoringBusinessIntelligence = intersection(L, BI)
    ScoringDataBase = intersection(L, BD)
    ScoringProfileType = intersection(L, Profile)
    ScoringMetiersType = intersection(L, Metiers)

    Prog = list(set(intersection(L, Program)))
    BigData = list(set(intersection(L, BigDataTools)))
    Frame = list(set(intersection(L, Front)))
    BackEnd = list(set(intersection(L, Back)))
    MobileDev = list(set(intersection(L, Mobile)))
    DevOpsTools = list(set(intersection(L, DevOps)))
    DesignTools = list(set(intersection(L, Design)))
    ScrumTools = list(set(intersection(L, Scrum)))
    BusinessIntelligence = list(set(intersection(L, BI)))
    DataBase = list(set(intersection(L, BD)))
    ProfileType = list(set(intersection(L, Profile)))
    MetiersType = list(set(intersection(L, Metiers)))
    Langue = list(set(intersection(L, langue)))

    Result = {'Developpement': Prog,
              'Front': Frame,
              'Backend': BackEnd,
              'Big Data': BigData,
              'Mobile': MobileDev,
              'DevOps': DevOpsTools,
              'Design': DesignTools,
              'Scrum': ScrumTools,
              'BI': BusinessIntelligence,
              'BD': DataBase,
              'Profile': ProfileType,
              'Langues': Langue
              }

    L = list(set(L))

    Tools = list(set(Prog + Frame + BackEnd + BigData + MobileDev +
                     DevOpsTools + DesignTools + ScrumTools + BusinessIntelligence + DataBase))
    Technologies = list(set(ProfileType))

    ScoringTools = ScoringProg + ScoringFrame + ScoringBackEnd + ScoringBigData + ScoringMobileDev + \
        ScoringDevOpsTools + ScoringDesignTools + ScoringScrumTools + \
        ScoringBusinessIntelligence + ScoringDataBase
    Langues = list(set(Langue))

    n = len(ScoringTools)
    if n != 0:
        ScoreDev = round(len(ScoringProg)*100/n, 2)
        ScoreFront = round(len(ScoringFrame)*100/n, 2)
        ScoreBack = round(len(ScoringBackEnd)*100/n, 2)
        ScoreBigData = round(len(ScoringBigData)*100/n, 2)
        ScoreBI = round(len(ScoringBusinessIntelligence)*100/n, 2)
        ScoreDevOps = round(len(ScoringDevOpsTools)*100/n, 2)
        ScoreScrum = round(len(ScoringScrumTools)*100/n, 2)
        ScoreDB = round(len(ScoringDataBase)*100/n, 2)
        ScoreDesign = round(len(ScoringDesignTools)*100/n, 2)
    else:
        ScoreDev = 1
        ScoreFront = 1
        ScoreBack = 1
        ScoreBigData = 1
        ScoreBI = 1
        ScoreDevOps = 1
        ScoreScrum = 1
        ScoreDB = 1
        ScoreDesign = 1

    Tools = ', '.join(Tools).replace('\'', '')
    Technologies = ', '.join(Technologies).replace('\'', '')
    Langues = ', '.join(Langues).replace('\'', '')
    LanguesArray = Langues

    Client = MongoClient(
        "mongodb://datauser:0p3nLAB@ds145303.mlab.com:45303/maltem_cv")
    db = Client["maltem_cv"]
    col = db["pdfparser"]

    document = {
        "id": pdfid,
        "name": Name,
        "email": Mail,
        "phone": Phone,
        "langues": LanguesArray,
        "texte": txt,
        "tools": Tools,
        "technologies": Technologies,
        "scoring": {
            "DÃ©veloppement": ScoreDev,
            "Front": ScoreFront,
            "Backend": ScoreBack,
            "Big Data": ScoreBigData,
            "BI": ScoreBI,
            "DevOps": ScoreDevOps,
            "Scrum": ScoreScrum,
            "Base de donnÃ©es": ScoreDB,
            "Design": ScoreDesign
        },
        "Tools": {'Developpement': Prog,
                  'Front': Frame,
                  'Back': BackEnd,
                  'Big Data': BigData,
                  'Mobile': MobileDev,
                  'DevOps': DevOpsTools,
                  'Design': DesignTools,
                  'Scrum': ScrumTools,
                  'BI': BusinessIntelligence,
                  'BD': DataBase
                  }
    }
    x = col.insert_one(document)

# java -mx4g -cp "*" edu.stanford.nlp.pipeline.StanfordCoreNLPServer -annotators "tokenize,ssplit,pos,lemma,parse,sentiment" -port 9000 -timeout 30000

    print('{ "pdfid":"', pdfid, '", "nom":"', Name, '", "mail":"', Email, '", "phone":"', Phone,  '", "LanguesArray":"', LanguesArray, '", "text":"', txt, '", "tools":"', Tools, '", "technology":"', Technologies, '", "scoreDev":"', ScoreDev, '", "scoreFront":"', ScoreFront, '", "scoreBack":"', ScoreBack, '", "scoreBigData":"', ScoreBigData, '", "scoreBI":"', ScoreBI, '", "scoreDevOps":"',
          ScoreDevOps, '", "scoreScrum":"', ScoreScrum, '", "scoreDB":"', ScoreDB, '", "scoreDesign":"', ScoreDesign, '", "Developpement":"', Prog, '", "Front":"', Frame,  '", "Back":"', BackEnd, '", "BigData":"', BigData, '", "BI":"', BusinessIntelligence, '", "DevOps":"', DevOpsTools, '", "Scrum":"', ScrumTools, '", "DataBase":"', DataBase, '", "Design":"', DesignTools, '"}')

    sys.stdout.flush()

    finished_data = './public/attachements/' + pdfid + '.pdf'
    os.rename(filepath, finished_data)
